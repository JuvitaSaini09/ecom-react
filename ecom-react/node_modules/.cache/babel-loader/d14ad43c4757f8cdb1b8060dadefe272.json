{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\dell\\\\Documents\\\\GitHub\\\\ecom-react\\\\ecom-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to Wishlist are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting items to user's wishlist.\r\n * send GET Request at /api/user/wishlist\r\n * */\n\nexport var getWishlistItemsHandler = function getWishlistItemsHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  if (!userId) {\n    new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  var userWishlist = schema.users.findBy({\n    _id: userId\n  }).wishlist;\n  return new Response(200, {}, {\n    wishlist: userWishlist\n  });\n};\n/**\r\n * This handler handles adding items to user's wishlist.\r\n * send POST Request at /api/user/wishlist\r\n * body contains {product}\r\n * */\n\nexport var addItemToWishlistHandler = function addItemToWishlistHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    var userWishlist = schema.users.findBy({\n      _id: userId\n    }).wishlist;\n\n    var _JSON$parse = JSON.parse(request.requestBody),\n        product = _JSON$parse.product;\n\n    userWishlist.push(_objectSpread({}, product, {\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    }));\n    this.db.users.update({\n      _id: userId\n    }, {\n      wishlist: userWishlist\n    });\n    return new Response(201, {}, {\n      wishlist: userWishlist\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};\n/**\r\n * This handler handles removing items to user's wishlist.\r\n * send DELETE Request at /api/user/wishlist\r\n * body contains {product}\r\n * */\n\nexport var removeItemFromWishlistHandler = function removeItemFromWishlistHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    var userWishlist = schema.users.findBy({\n      _id: userId\n    }).wishlist;\n    var productId = request.params.productId;\n    userWishlist = userWishlist.filter(function (item) {\n      return item._id !== productId;\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      wishlist: userWishlist\n    });\n    return new Response(200, {}, {\n      wishlist: userWishlist\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/GitHub/ecom-react/ecom-react/src/backend/controllers/WishlistController.js"],"names":["Response","formatDate","requiresAuth","getWishlistItemsHandler","schema","request","userId","call","errors","userWishlist","users","findBy","_id","wishlist","addItemToWishlistHandler","JSON","parse","requestBody","product","push","createdAt","updatedAt","db","update","error","removeItemFromWishlistHandler","productId","params","filter","item"],"mappings":";AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,oBAAzC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAChE,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;AACA,MAAI,CAACC,MAAL,EAAa;AACX,QAAIN,QAAJ,CACE,GADF,EAEE,EAFF,EAGE;AACEQ,MAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,KAHF;AAOD;;AACD,MAAMC,YAAY,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;AAAEC,IAAAA,GAAG,EAAEN;AAAP,GAApB,EAAqCO,QAA1D;AACA,SAAO,IAAIb,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEa,IAAAA,QAAQ,EAAEJ;AAAZ,GAAtB,CAAP;AACD,CAbM;AAeP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMK,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAUV,MAAV,EAAkBC,OAAlB,EAA2B;AACjE,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;AACA,MAAI;AACF,QAAI,CAACC,MAAL,EAAa;AACX,UAAIN,QAAJ,CACE,GADF,EAEE,EAFF,EAGE;AACEQ,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHF;AAOD;;AACD,QAAMC,YAAY,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;AAAEC,MAAAA,GAAG,EAAEN;AAAP,KAApB,EAAqCO,QAA1D;;AAVE,sBAWkBE,IAAI,CAACC,KAAL,CAAWX,OAAO,CAACY,WAAnB,CAXlB;AAAA,QAWMC,OAXN,eAWMA,OAXN;;AAYFT,IAAAA,YAAY,CAACU,IAAb,mBACKD,OADL;AAEEE,MAAAA,SAAS,EAAEnB,UAAU,EAFvB;AAGEoB,MAAAA,SAAS,EAAEpB,UAAU;AAHvB;AAKA,SAAKqB,EAAL,CAAQZ,KAAR,CAAca,MAAd,CAAqB;AAAEX,MAAAA,GAAG,EAAEN;AAAP,KAArB,EAAsC;AAAEO,MAAAA,QAAQ,EAAEJ;AAAZ,KAAtC;AACA,WAAO,IAAIT,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEa,MAAAA,QAAQ,EAAEJ;AAAZ,KAAtB,CAAP;AACD,GAnBD,CAmBE,OAAOe,KAAP,EAAc;AACd,WAAO,IAAIxB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEwB,MAAAA,KAAK,EAALA;AADF,KAHK,CAAP;AAOD;AACF,CA9BM;AAgCP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAUrB,MAAV,EAAkBC,OAAlB,EAA2B;AACtE,MAAMC,MAAM,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAf;;AACA,MAAI;AACF,QAAI,CAACC,MAAL,EAAa;AACX,UAAIN,QAAJ,CACE,GADF,EAEE,EAFF,EAGE;AACEQ,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHF;AAOD;;AACD,QAAIC,YAAY,GAAGL,MAAM,CAACM,KAAP,CAAaC,MAAb,CAAoB;AAAEC,MAAAA,GAAG,EAAEN;AAAP,KAApB,EAAqCO,QAAxD;AACA,QAAMa,SAAS,GAAGrB,OAAO,CAACsB,MAAR,CAAeD,SAAjC;AACAjB,IAAAA,YAAY,GAAGA,YAAY,CAACmB,MAAb,CAAoB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACjB,GAAL,KAAac,SAAvB;AAAA,KAApB,CAAf;AACA,SAAKJ,EAAL,CAAQZ,KAAR,CAAca,MAAd,CAAqB;AAAEX,MAAAA,GAAG,EAAEN;AAAP,KAArB,EAAsC;AAAEO,MAAAA,QAAQ,EAAEJ;AAAZ,KAAtC;AACA,WAAO,IAAIT,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEa,MAAAA,QAAQ,EAAEJ;AAAZ,KAAtB,CAAP;AACD,GAfD,CAeE,OAAOe,KAAP,EAAc;AACd,WAAO,IAAIxB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEwB,MAAAA,KAAK,EAALA;AADF,KAHK,CAAP;AAOD;AACF,CA1BM","sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to Wishlist are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting items to user's wishlist.\r\n * send GET Request at /api/user/wishlist\r\n * */\r\n\r\nexport const getWishlistItemsHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  if (!userId) {\r\n    new Response(\r\n      404,\r\n      {},\r\n      {\r\n        errors: [\"The email you entered is not Registered. Not Found error\"],\r\n      }\r\n    );\r\n  }\r\n  const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\r\n  return new Response(200, {}, { wishlist: userWishlist });\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's wishlist.\r\n * send POST Request at /api/user/wishlist\r\n * body contains {product}\r\n * */\r\n\r\nexport const addItemToWishlistHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\r\n    const { product } = JSON.parse(request.requestBody);\r\n    userWishlist.push({\r\n      ...product,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n    });\r\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\r\n    return new Response(201, {}, { wishlist: userWishlist });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles removing items to user's wishlist.\r\n * send DELETE Request at /api/user/wishlist\r\n * body contains {product}\r\n * */\r\n\r\nexport const removeItemFromWishlistHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    let userWishlist = schema.users.findBy({ _id: userId }).wishlist;\r\n    const productId = request.params.productId;\r\n    userWishlist = userWishlist.filter((item) => item._id !== productId);\r\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\r\n    return new Response(200, {}, { wishlist: userWishlist });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}