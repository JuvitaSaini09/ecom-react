{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\dell\\\\Documents\\\\GitHub\\\\ecom-react\\\\ecom-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\dell\\\\Documents\\\\GitHub\\\\ecom-react\\\\ecom-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\n\nvar sign = require(\"jwt-encode\");\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\n\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\n\n\nexport var signupHandler = function signupHandler(schema, request) {\n  var _JSON$parse = JSON.parse(request.requestBody),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password,\n      rest = _objectWithoutProperties(_JSON$parse, [\"email\", \"password\"]);\n\n  try {\n    // check if email already exists\n    var foundUser = schema.users.findBy({\n      email: email\n    });\n\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Email Already Exists.\"]\n      });\n    }\n\n    var _id = uuid();\n\n    var newUser = _objectSpread({\n      _id: _id,\n      email: email,\n      password: password,\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    }, rest, {\n      cart: [],\n      wishlist: []\n    });\n\n    var createdUser = schema.users.create(newUser);\n    var encodedToken = sign({\n      _id: _id,\n      email: email\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser: createdUser,\n      encodedToken: encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\n\nexport var loginHandler = function loginHandler(schema, request) {\n  var _JSON$parse2 = JSON.parse(request.requestBody),\n      email = _JSON$parse2.email,\n      password = _JSON$parse2.password;\n\n  try {\n    var foundUser = schema.users.findBy({\n      email: email\n    });\n\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    if (password === foundUser.password) {\n      var encodedToken = sign({\n        _id: foundUser._id,\n        email: email\n      }, process.env.REACT_APP_JWT_SECRET);\n      foundUser.password = undefined;\n      return new Response(200, {}, {\n        foundUser: foundUser,\n        encodedToken: encodedToken\n      });\n    }\n\n    new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/GitHub/ecom-react/ecom-react/src/backend/controllers/AuthController.js"],"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","JSON","parse","requestBody","email","password","rest","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","cart","wishlist","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler","undefined"],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\r\nimport { Response } from \"miragejs\";\r\nimport { formatDate } from \"../utils/authUtils\";\r\nconst sign = require(\"jwt-encode\");\r\n/**\r\n * All the routes related to Auth are present here.\r\n * These are Publicly accessible routes.\r\n * */\r\n\r\n/**\r\n * This handler handles user signups.\r\n * send POST Request at /api/auth/signup\r\n * body contains {firstName, lastName, email, password}\r\n * */\r\n\r\nexport const signupHandler = function (schema, request) {\r\n  const { email, password, ...rest } = JSON.parse(request.requestBody);\r\n  try {\r\n    // check if email already exists\r\n    const foundUser = schema.users.findBy({ email });\r\n    if (foundUser) {\r\n      return new Response(\r\n        422,\r\n        {},\r\n        {\r\n          errors: [\"Unprocessable Entity. Email Already Exists.\"],\r\n        }\r\n      );\r\n    }\r\n    const _id = uuid();\r\n    const newUser = {\r\n      _id,\r\n      email,\r\n      password,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      ...rest,\r\n      cart: [],\r\n      wishlist: [],\r\n    };\r\n    const createdUser = schema.users.create(newUser);\r\n    const encodedToken = sign({ _id, email }, process.env.REACT_APP_JWT_SECRET);\r\n    return new Response(201, {}, { createdUser, encodedToken });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles user login.\r\n * send POST Request at /api/auth/login\r\n * body contains {email, password}\r\n * */\r\n\r\nexport const loginHandler = function (schema, request) {\r\n  const { email, password } = JSON.parse(request.requestBody);\r\n  try {\r\n    const foundUser = schema.users.findBy({ email });\r\n    if (!foundUser) {\r\n      return new Response(\r\n        404,\r\n        {},\r\n        { errors: [\"The email you entered is not Registered. Not Found error\"] }\r\n      );\r\n    }\r\n    if (password === foundUser.password) {\r\n      const encodedToken = sign(\r\n        { _id: foundUser._id, email },\r\n        process.env.REACT_APP_JWT_SECRET\r\n      );\r\n      foundUser.password = undefined;\r\n      return new Response(200, {}, { foundUser, encodedToken });\r\n    }\r\n    new Response(\r\n      401,\r\n      {},\r\n      {\r\n        errors: [\r\n          \"The credentials you entered are invalid. Unauthorized access error.\",\r\n        ],\r\n      }\r\n    );\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}