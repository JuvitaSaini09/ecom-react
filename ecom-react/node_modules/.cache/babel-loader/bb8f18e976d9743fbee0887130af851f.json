{"ast":null,"code":"import { Response } from \"miragejs\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\nexport var requiresAuth = function requiresAuth(request) {\n  var encodedToken = request.requestHeaders.authorization;\n  var decodedToken = jwt_decode(encodedToken, process.env.REACT_APP_JWT_SECRET);\n\n  if (decodedToken) {\n    var user = this.db.users.findBy({\n      email: decodedToken.email\n    });\n\n    if (user) {\n      return user._id;\n    }\n  }\n\n  return new Response(401, {}, {\n    errors: [\"The token is invalid. Unauthorized access error.\"]\n  });\n};\nexport var formatDate = function formatDate() {\n  return dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/GitHub/ecom-react/ecom-react/src/backend/utils/authUtils.js"],"names":["Response","dayjs","jwt_decode","requiresAuth","request","encodedToken","requestHeaders","authorization","decodedToken","process","env","REACT_APP_JWT_SECRET","user","db","users","findBy","email","_id","errors","formatDate","format"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAUC,OAAV,EAAmB;AAC7C,MAAMC,YAAY,GAAGD,OAAO,CAACE,cAAR,CAAuBC,aAA5C;AACA,MAAMC,YAAY,GAAGN,UAAU,CAC7BG,YAD6B,EAE7BI,OAAO,CAACC,GAAR,CAAYC,oBAFiB,CAA/B;;AAIA,MAAIH,YAAJ,EAAkB;AAChB,QAAMI,IAAI,GAAG,KAAKC,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEC,MAAAA,KAAK,EAAER,YAAY,CAACQ;AAAtB,KAArB,CAAb;;AACA,QAAIJ,IAAJ,EAAU;AACR,aAAOA,IAAI,CAACK,GAAZ;AACD;AACF;;AACD,SAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AAAEkB,IAAAA,MAAM,EAAE,CAAC,kDAAD;AAAV,GAHK,CAAP;AAKD,CAjBM;AAmBP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAMlB,KAAK,GAAGmB,MAAR,CAAe,sBAAf,CAAN;AAAA,CAAnB","sourcesContent":["import { Response } from \"miragejs\";\r\nimport dayjs from \"dayjs\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const requiresAuth = function (request) {\r\n  const encodedToken = request.requestHeaders.authorization;\r\n  const decodedToken = jwt_decode(\r\n    encodedToken,\r\n    process.env.REACT_APP_JWT_SECRET\r\n  );\r\n  if (decodedToken) {\r\n    const user = this.db.users.findBy({ email: decodedToken.email });\r\n    if (user) {\r\n      return user._id;\r\n    }\r\n  }\r\n  return new Response(\r\n    401,\r\n    {},\r\n    { errors: [\"The token is invalid. Unauthorized access error.\"] }\r\n  );\r\n};\r\n\r\nexport const formatDate = () => dayjs().format(\"YYYY-MM-DDTHH:mm:ssZ\");\r\n"]},"metadata":{},"sourceType":"module"}