{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\dell\\\\Documents\\\\GitHub\\\\ecom-react\\\\ecom-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\n\n/**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */\n\nexport var getCartItemsHandler = function getCartItemsHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  if (!userId) {\n    new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  var userCart = schema.users.findBy({\n    _id: userId\n  }).cart;\n  return new Response(200, {}, {\n    cart: userCart\n  });\n};\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */\n\nexport var addItemToCartHandler = function addItemToCartHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    var userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n\n    var _JSON$parse = JSON.parse(request.requestBody),\n        product = _JSON$parse.product;\n\n    userCart.push(_objectSpread({}, product, {\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1\n    }));\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(201, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};\n/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */\n\nexport var removeItemFromCartHandler = function removeItemFromCartHandler(schema, request) {\n  var userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    var userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    var productId = request.params.productId;\n    userCart = userCart.filter(function (item) {\n      return item._id !== productId;\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */\n\nexport var updateCartItemHandler = function updateCartItemHandler(schema, request) {\n  var productId = request.params.productId;\n  var userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    var userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n\n    var _JSON$parse2 = JSON.parse(request.requestBody),\n        action = _JSON$parse2.action;\n\n    if (action.type === \"increment\") {\n      userCart.forEach(function (product) {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach(function (product) {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/GitHub/ecom-react/ecom-react/src/backend/controllers/CartController.js"],"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","userId","call","errors","userCart","users","findBy","_id","cart","addItemToCartHandler","JSON","parse","requestBody","product","push","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","action","type","forEach"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\r\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\r\n\r\n/**\r\n * All the routes related to Cart are present here.\r\n * These are private routes.\r\n * Client needs to add \"authorization\" header with JWT token in it to access it.\r\n * */\r\n\r\n/**\r\n * This handler handles getting items to user's cart.\r\n * send GET Request at /api/user/cart\r\n * */\r\nexport const getCartItemsHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  if (!userId) {\r\n    new Response(\r\n      404,\r\n      {},\r\n      {\r\n        errors: [\"The email you entered is not Registered. Not Found error\"],\r\n      }\r\n    );\r\n  }\r\n  const userCart = schema.users.findBy({ _id: userId }).cart;\r\n  return new Response(200, {}, { cart: userCart });\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart\r\n * body contains {product}\r\n * */\r\n\r\nexport const addItemToCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { product } = JSON.parse(request.requestBody);\r\n    userCart.push({\r\n      ...product,\r\n      createdAt: formatDate(),\r\n      updatedAt: formatDate(),\r\n      qty: 1,\r\n    });\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(201, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles removing items to user's cart.\r\n * send DELETE Request at /api/user/cart/:productId\r\n * */\r\n\r\nexport const removeItemFromCartHandler = function (schema, request) {\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    let userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const productId = request.params.productId;\r\n    userCart = userCart.filter((item) => item._id !== productId);\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * This handler handles adding items to user's cart.\r\n * send POST Request at /api/user/cart/:productId\r\n * body contains {action} (whose 'type' can be increment or decrement)\r\n * */\r\n\r\nexport const updateCartItemHandler = function (schema, request) {\r\n  const productId = request.params.productId;\r\n  const userId = requiresAuth.call(this, request);\r\n  try {\r\n    if (!userId) {\r\n      new Response(\r\n        404,\r\n        {},\r\n        {\r\n          errors: [\"The email you entered is not Registered. Not Found error\"],\r\n        }\r\n      );\r\n    }\r\n    const userCart = schema.users.findBy({ _id: userId }).cart;\r\n    const { action } = JSON.parse(request.requestBody);\r\n    if (action.type === \"increment\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty += 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    } else if (action.type === \"decrement\") {\r\n      userCart.forEach((product) => {\r\n        if (product._id === productId) {\r\n          product.qty -= 1;\r\n          product.updatedAt = formatDate();\r\n        }\r\n      });\r\n    }\r\n    this.db.users.update({ _id: userId }, { cart: userCart });\r\n    return new Response(200, {}, { cart: userCart });\r\n  } catch (error) {\r\n    return new Response(\r\n      500,\r\n      {},\r\n      {\r\n        error,\r\n      }\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}