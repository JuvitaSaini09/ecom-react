{"ast":null,"code":"var CryptoJS = require('ts.cryptojs256');\n/**\n * Default options for JWT signature\n */\n\n\nvar defaultHeader = {\n  alg: 'HS256',\n  typ: 'JWT'\n};\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\n\nfunction base64url(data) {\n  return CryptoJS.enc.Base64.stringify(data).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\n\n\nfunction sign(data, secret) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var header = Object.assign(defaultHeader, options);\n\n  if (header.alg !== 'HS256' && header.typ !== 'JWT') {\n    throw new Error('jwt-encode only support the HS256 algorithm and the JWT type of hash');\n  }\n\n  var encodedHeader = encode(header);\n  var encodedData = encode(data);\n  var signature = \"\".concat(encodedHeader, \".\").concat(encodedData);\n  signature = CryptoJS.HmacSHA256(signature, secret);\n  signature = base64url(signature);\n  return \"\".concat(encodedHeader, \".\").concat(encodedData, \".\").concat(signature);\n}\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\n\n\nfunction encode(data) {\n  var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  return base64url(stringifiedData);\n}\n\nmodule.exports = sign;","map":null,"metadata":{},"sourceType":"script"}